-- AI Agents Suite - Supabase Database Setup
-- Execute these scripts in your Supabase SQL Editor

-- ========================================
-- 1. ENABLE EXTENSIONS
-- ========================================

-- Enable vector extension for embeddings
create extension if not exists vector;

-- Enable uuid extension for unique IDs
create extension if not exists "uuid-ossp";

-- ========================================
-- 2. CORE TABLES
-- ========================================

-- Agent Memory Table (for vector storage and retrieval)
create table if not exists agent_memory (
  id bigserial primary key,
  agent_id text not null,
  content text not null,
  embedding vector(1536),
  metadata jsonb default '{}',
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Create index for vector similarity search
create index if not exists agent_memory_embedding_idx 
on agent_memory using ivfflat (embedding vector_cosine_ops)
with (lists = 100);

-- Create index for agent_id filtering
create index if not exists agent_memory_agent_id_idx 
on agent_memory (agent_id);

-- Create index for metadata queries
create index if not exists agent_memory_metadata_idx 
on agent_memory using gin (metadata);

-- ========================================
-- 3. LEAD MANAGEMENT TABLES
-- ========================================

-- Leads table for qualification tracking
create table if not exists leads (
  id uuid default gen_random_uuid() primary key,
  linkedin_url text unique,
  company_domain text,
  name text,
  title text,
  company text,
  email text,
  phone text,
  qualification_score integer,
  recommendation text check (recommendation in ('pursue', 'nurture', 'disqualify')),
  personalization_hooks jsonb default '[]',
  status text default 'new' check (status in ('new', 'qualified', 'contacted', 'responded', 'converted', 'disqualified')),
  source text,
  notes text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Lead interactions tracking
create table if not exists lead_interactions (
  id uuid default gen_random_uuid() primary key,
  lead_id uuid references leads(id) on delete cascade,
  interaction_type text not null check (interaction_type in ('email', 'linkedin', 'twitter', 'phone', 'meeting')),
  direction text not null check (direction in ('outbound', 'inbound')),
  subject text,
  content text,
  response_received boolean default false,
  response_type text check (response_type in ('positive', 'negative', 'neutral', 'objection', 'interested', 'not_interested')),
  scheduled_at timestamp with time zone,
  sent_at timestamp with time zone,
  opened_at timestamp with time zone,
  replied_at timestamp with time zone,
  metadata jsonb default '{}',
  created_at timestamp with time zone default now()
);

-- ========================================
-- 4. CONTENT MANAGEMENT TABLES
-- ========================================

-- Content pieces generated by agents
create table if not exists content_pieces (
  id uuid default gen_random_uuid() primary key,
  agent_id text not null,
  topic text not null,
  platform text not null check (platform in ('linkedin', 'twitter', 'email', 'blog', 'youtube')),
  content_type text not null check (content_type in ('post', 'thread', 'article', 'email', 'video_script')),
  title text,
  content text not null,
  hashtags text[],
  mentions text[],
  engagement_prediction numeric(3,2),
  brand_voice_score numeric(3,2),
  published boolean default false,
  published_at timestamp with time zone,
  performance_metrics jsonb default '{}',
  metadata jsonb default '{}',
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Content performance tracking
create table if not exists content_performance (
  id uuid default gen_random_uuid() primary key,
  content_id uuid references content_pieces(id) on delete cascade,
  platform text not null,
  views integer default 0,
  likes integer default 0,
  shares integer default 0,
  comments integer default 0,
  clicks integer default 0,
  engagement_rate numeric(5,4),
  reach integer default 0,
  impressions integer default 0,
  measured_at timestamp with time zone default now()
);

-- ========================================
-- 5. CAMPAIGN MANAGEMENT TABLES
-- ========================================

-- Outreach campaigns
create table if not exists campaigns (
  id uuid default gen_random_uuid() primary key,
  name text not null,
  campaign_type text not null check (campaign_type in ('lead_nurture', 'cold_outreach', 'content_promotion', 're_engagement')),
  status text default 'draft' check (status in ('draft', 'active', 'paused', 'completed', 'cancelled')),
  target_audience jsonb,
  channels text[] not null,
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  goals jsonb,
  settings jsonb default '{}',
  created_by text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Campaign sequences (message templates and timing)
create table if not exists campaign_sequences (
  id uuid default gen_random_uuid() primary key,
  campaign_id uuid references campaigns(id) on delete cascade,
  sequence_order integer not null,
  channel text not null,
  delay_hours integer default 0,
  subject_template text,
  message_template text not null,
  conditions jsonb default '{}',
  active boolean default true,
  created_at timestamp with time zone default now()
);

-- Campaign enrollments (leads in campaigns)
create table if not exists campaign_enrollments (
  id uuid default gen_random_uuid() primary key,
  campaign_id uuid references campaigns(id) on delete cascade,
  lead_id uuid references leads(id) on delete cascade,
  status text default 'enrolled' check (status in ('enrolled', 'active', 'paused', 'completed', 'unsubscribed')),
  current_sequence integer default 1,
  next_action_at timestamp with time zone,
  enrolled_at timestamp with time zone default now(),
  completed_at timestamp with time zone,
  unique(campaign_id, lead_id)
);

-- ========================================
-- 6. ANALYTICS AND MONITORING TABLES
-- ========================================

-- API usage and cost tracking
create table if not exists api_usage (
  id uuid default gen_random_uuid() primary key,
  provider text not null check (provider in ('openai', 'claude', 'gemini')),
  agent_id text not null,
  endpoint text,
  model text,
  input_tokens integer default 0,
  output_tokens integer default 0,
  total_tokens integer default 0,
  input_cost numeric(10,6) default 0,
  output_cost numeric(10,6) default 0,
  total_cost numeric(10,6) default 0,
  response_time_ms integer,
  success boolean default true,
  error_message text,
  request_metadata jsonb default '{}',
  created_at timestamp with time zone default now()
);

-- Performance metrics
create table if not exists performance_metrics (
  id uuid default gen_random_uuid() primary key,
  metric_type text not null check (metric_type in ('agent_performance', 'workflow_performance', 'cost_efficiency', 'user_satisfaction')),
  agent_id text,
  workflow_id text,
  metric_name text not null,
  metric_value numeric not null,
  dimensions jsonb default '{}',
  measured_at timestamp with time zone default now()
);

-- System health monitoring
create table if not exists system_health (
  id uuid default gen_random_uuid() primary key,
  component text not null,
  status text not null check (status in ('healthy', 'warning', 'error', 'down')),
  message text,
  details jsonb default '{}',
  checked_at timestamp with time zone default now()
);

-- ========================================
-- 7. FUNCTIONS FOR VECTOR SIMILARITY
-- ========================================

-- Drop existing function if it exists
drop function if exists match_memories(text,vector,double precision,integer);

-- Function to match memories by similarity
create or replace function match_memories(
  query_agent_id text,
  query_embedding vector(1536),
  match_threshold float default 0.7,
  match_count int default 5
)
returns table (
  id bigint,
  agent_id text,
  content text,
  metadata jsonb,
  similarity float
)
language sql stable
as $$
  select 
    agent_memory.id,
    agent_memory.agent_id,
    agent_memory.content,
    agent_memory.metadata,
    1 - (agent_memory.embedding <=> query_embedding) as similarity
  from agent_memory
  where agent_memory.agent_id = query_agent_id
    and 1 - (agent_memory.embedding <=> query_embedding) > match_threshold
  order by similarity desc
  limit match_count;
$$;

-- Function to get cost summary by date range
create or replace function get_cost_summary(
  start_date timestamp with time zone default now() - interval '30 days',
  end_date timestamp with time zone default now()
)
returns table (
  provider text,
  total_requests bigint,
  total_tokens bigint,
  total_cost numeric,
  avg_cost_per_request numeric
)
language sql stable
as $$
  select 
    api_usage.provider,
    count(*) as total_requests,
    sum(total_tokens) as total_tokens,
    sum(total_cost) as total_cost,
    avg(total_cost) as avg_cost_per_request
  from api_usage
  where created_at between start_date and end_date
    and success = true
  group by provider
  order by total_cost desc;
$$;

-- Function to get agent performance summary
create or replace function get_agent_performance(
  agent_name text,
  days_back int default 30
)
returns table (
  total_requests bigint,
  success_rate numeric,
  avg_response_time numeric,
  total_cost numeric
)
language sql stable
as $$
  select 
    count(*) as total_requests,
    (count(*) filter (where success = true) * 100.0 / count(*)) as success_rate,
    avg(response_time_ms) as avg_response_time,
    sum(total_cost) as total_cost
  from api_usage
  where agent_id = agent_name
    and created_at >= now() - (days_back || ' days')::interval;
$$;

-- ========================================
-- 8. TRIGGERS FOR UPDATED_AT
-- ========================================

-- Function to update updated_at column
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language 'plpgsql';

-- Create triggers for updated_at
create trigger update_leads_updated_at before update on leads
  for each row execute procedure update_updated_at_column();

create trigger update_content_pieces_updated_at before update on content_pieces
  for each row execute procedure update_updated_at_column();

create trigger update_campaigns_updated_at before update on campaigns
  for each row execute procedure update_updated_at_column();

create trigger update_agent_memory_updated_at before update on agent_memory
  for each row execute procedure update_updated_at_column();

-- ========================================
-- 9. ROW LEVEL SECURITY (Optional)
-- ========================================

-- Enable RLS on sensitive tables (uncomment if needed)
-- alter table leads enable row level security;
-- alter table lead_interactions enable row level security;
-- alter table campaigns enable row level security;
-- alter table api_usage enable row level security;

-- Example RLS policies (customize based on your auth system)
-- create policy "Users can only see their own leads" on leads
--   for all using (auth.uid() = created_by::uuid);

-- ========================================
-- 10. INITIAL DATA AND SETTINGS
-- ========================================

-- Insert default system health record
insert into system_health (component, status, message)
values ('database', 'healthy', 'Database setup completed successfully')
on conflict do nothing;

-- Create indexes for performance
create index if not exists leads_status_idx on leads (status);
create index if not exists leads_recommendation_idx on leads (recommendation);
create index if not exists lead_interactions_lead_id_idx on lead_interactions (lead_id);
create index if not exists lead_interactions_type_idx on lead_interactions (interaction_type);
create index if not exists content_pieces_platform_idx on content_pieces (platform);
create index if not exists content_pieces_agent_idx on content_pieces (agent_id);
create index if not exists api_usage_provider_idx on api_usage (provider);
create index if not exists api_usage_agent_idx on api_usage (agent_id);
create index if not exists api_usage_created_at_idx on api_usage (created_at);
create index if not exists campaigns_status_idx on campaigns (status);
create index if not exists campaign_enrollments_status_idx on campaign_enrollments (status);

-- ========================================
-- SETUP COMPLETE
-- ========================================

-- Verify setup with a test query
select 
  'Setup completed successfully!' as message,
  count(*) as total_tables
from information_schema.tables 
where table_schema = 'public' 
  and table_name in (
    'agent_memory', 'leads', 'lead_interactions', 'content_pieces', 
    'content_performance', 'campaigns', 'campaign_sequences', 
    'campaign_enrollments', 'api_usage', 'performance_metrics', 
    'system_health'
  );